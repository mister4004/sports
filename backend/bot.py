import logging
import os
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("/home/mister/project-root/config/.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ URL FastAPI –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")  # URL FastAPI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if not TELEGRAM_BOT_TOKEN:
    logging.error("Telegram bot token is not set in .env file.")
    exit(1)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    web_app_info = WebAppInfo(url="https://football.zapto.org/")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app_info)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def handle_date_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã
    today = datetime.now().strftime("%Y-%m-%d")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    day_after = (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%d")

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ callback_data –∏ –¥–∞—Ç
    date_map = {
        "today": today,
        "tomorrow": tomorrow,
        "day_after_tomorrow": day_after
    }
    date = date_map.get(query.data)

    if not date:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ FastAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π
    try:
        response = requests.get(f"{FASTAPI_URL}/matches/", params={"date": date})
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        matches = response.json().get("response", [])  # –ü–æ–ª—É—á–∞–µ–º "response" –∏–∑ –æ—Ç–≤–µ—Ç–∞
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not matches:
        await query.edit_message_text("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –º–∞—Ç—á–µ–π –Ω–µ—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = []
    for match in matches:
        match_id = match["fixture"]["id"]
        match_name = f"{match['teams']['home']['name']} vs {match['teams']['away']['name']}"
        keyboard.append([InlineKeyboardButton(match_name, callback_data=f"match_{match_id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ú–∞—Ç—á–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞
async def handle_match_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ callback_data
    match_id = query.data.split("_")[1]

    # –ó–∞–ø—Ä–æ—Å –∫ FastAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞
    try:
        response = requests.get(f"{FASTAPI_URL}/match/{match_id}")
        response.raise_for_status()
        match_data = response.json()["response"][0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ "response"
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–∞—Ç—á–∞
    message = (
        f"‚öΩ –ú–∞—Ç—á: {match_data['teams']['home']['name']} vs {match_data['teams']['away']['name']}\n"
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: {match_data['league']['name']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {match_data['fixture']['date']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{match_id}")],
        [InlineKeyboardButton("–õ–∏–Ω–∏—è/–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", callback_data=f"odds_{match_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ç—á–∞
    match_id = query.data.split("_")[1]

    # –ó–∞–ø—Ä–æ—Å –∫ FastAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
    try:
        response = requests.get(f"{FASTAPI_URL}/match/{match_id}")
        response.raise_for_status()
        match_data = response.json()["response"][0]
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–∞—Ç—á–∞ {match_data['teams']['home']['name']} vs {match_data['teams']['away']['name']}:\n"
    stats += f"- –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä –∫–æ–º–∞–Ω–¥—ã A: {match_data.get('team_a_last_5', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
    stats += f"- –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä –∫–æ–º–∞–Ω–¥—ã B: {match_data.get('team_b_last_5', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
    stats += f"- –õ–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏: {match_data.get('head_to_head', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"

    await query.edit_message_text(stats)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–Ω–∏–∏/–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
async def handle_odds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ç—á–∞
    match_id = query.data.split("_")[1]

    # –ó–∞–ø—Ä–æ—Å –∫ FastAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞
    try:
        response = requests.get(f"{FASTAPI_URL}/match/{match_id}")
        response.raise_for_status()
        match_data = response.json()["response"][0]
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    odds = f"üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞—Ç—á–∞ {match_data['teams']['home']['name']} vs {match_data['teams']['away']['name']}:\n"
    odds_data = match_data.get("odds", {})
    odds += f"- –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã A: {odds_data.get('team_a', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
    odds += f"- –ù–∏—á—å—è: {odds_data.get('draw', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
    odds += f"- –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã B: {odds_data.get('team_b', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"

    await query.edit_message_text(odds)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_date_choice, pattern="^(today|tomorrow|day_after_tomorrow)$"))
    application.add_handler(CallbackQueryHandler(handle_match_choice, pattern="^match_"))
    application.add_handler(CallbackQueryHandler(handle_stats, pattern="^stats_"))
    application.add_handler(CallbackQueryHandler(handle_odds, pattern="^odds_"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
